generator client {
  provider = "prisma-client-js"
  relationMode = "prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id
  email String @unique
  password String
  userType UserType
  firstName String
  middleName String?
  lastName String
  isEmailVerified Boolean? @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  phone1 String @unique
  phone2 String? @unique
  profileImage String?
  owner Owner?
  renter Renter?
}

model Owner {
  id String @id @default(cuid())
  ownerId Int @unique
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  isVerified Boolean? @default(false)
  address Address?
  aadharId String @unique
  panId String @unique
  aadhar String @unique
  pan String @unique
  drivingLicenseId String? @unique
  drivingLicense String? @unique
  voterId String? @unique
  voter String? @unique
  profileImage String?
  description String?
  preferredContactMethod PreferredContactMethod?
  preferredLanguage String?
  emergencyDetails EmergencyDetails?
  properties Property[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Property {
  id String @id @default(cuid())
  ownerId Int
  renters Renter[]
  owner Owner @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade)
  isVerified Boolean? @default(false)
  status PropertyStatus @default(pendingApproval)
  nextAvailableDate DateTime?
  name String?
  address Address?
  type PropertyType
  roomDetails RoomDetails?
  rent Int?
  description String
  preferred Preference
  photos String[]
  electricityBillConsumerNo Int @unique
  propertyId String @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model RoomDetails {
  id String @id @default(cuid())
  propertyId String @unique
  property Property @relation(fields: [propertyId], references: [id])
  quantity Int
  rentType RentType
  rent Int?
  perPersonRent Int?
}

model Renter {
  id String @id @default(cuid())
  renterId Int @unique
  renter User @relation(fields: [renterId], references: [id], onDelete: Cascade)
  rentedPropertyId String?
  rentedProperty Property? @relation(fields: [rentedPropertyId], references: [id])
  address Address?
  aadharId String @unique
  panId String @unique
  aadhar String @unique
  pan String @unique
  drivingLicenseId String? @unique
  drivingLicense String? @unique
  voterId String? @unique
  voter String? @unique
  description String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  guardianDetails EmergencyDetails[]
}

enum Preference {
  family
  bachelors
  any
}

enum RentType {
  total
  perPerson
}

enum PropertyType {
  apartment
  house
  rooms
}

model Address {
  id String @id @default(cuid())
  ownerId Int? @unique
  owner Owner? @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade)
  propertyId String? @unique
  property Property? @relation(fields: [propertyId], references: [id])
  renterId Int? @unique
  renter Renter? @relation(fields: [renterId], references: [renterId])
  addressLine String
  city String
  state String
  pincode Int
  electricityBill String?
  propertyTaxBill String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model EmergencyDetails {
  id String @id @default(cuid())
  ownerId Int? @unique
  owner Owner? @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade)
  renterId Int? @unique
  renter Renter? @relation(fields: [renterId], references: [renterId])
  phone1 String @unique
  phone2 String?
  email String @unique
  firstName String
  middleName String?
  lastName String
  relation String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum PropertyStatus {
  available
  rentedOut
  underMaintenance
  notRentingAnymore
  pendingApproval
}

enum PreferredContactMethod {
  email
  phone
  any
}

enum UserType {
  superuser
  owner
  renter
}
